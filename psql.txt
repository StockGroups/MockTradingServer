-- 1. 创建所有必需的表（强制创建，忽略已存在的表）
CREATE TABLE IF NOT EXISTS public.stocks (
  id TEXT PRIMARY KEY,
  name TEXT NOT NULL,
  price REAL NOT NULL DEFAULT 0.01,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS public."user" (
  id INTEGER PRIMARY KEY DEFAULT 1,
  balance REAL NOT NULL DEFAULT 100000.00,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  UNIQUE(id)
);

CREATE TABLE IF NOT EXISTS public.portfolio (
  id SERIAL PRIMARY KEY,
  stockId TEXT NOT NULL,
  stockName TEXT NOT NULL,
  quantity INTEGER NOT NULL DEFAULT 0 CHECK (quantity >= 0),
  averagePrice REAL NOT NULL DEFAULT 0.01 CHECK (averagePrice > 0),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (stockId) REFERENCES public.stocks(id),
  UNIQUE(stockId)
);

CREATE TABLE IF NOT EXISTS public.transactions (
  id TEXT PRIMARY KEY,
  type TEXT NOT NULL CHECK (type IN ('buy', 'sell')),
  stockId TEXT NOT NULL,
  stockName TEXT NOT NULL,
  quantity INTEGER NOT NULL CHECK (quantity > 0),
  price REAL NOT NULL CHECK (price > 0),
  total REAL NOT NULL CHECK (total > 0),
  profitLoss REAL,
  timestamp TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (stockId) REFERENCES public.stocks(id)
);

-- 2. 插入默认股票数据（确保 stocks 表有数据）
INSERT INTO public.stocks (id, name, price) VALUES
  ('600036', '招商银行', 32.65),
  ('601318', '中国平安', 42.80),
  ('600519', '贵州茅台', 1725.00),
  ('000858', '五粮液', 168.50),
  ('000333', '美的集团', 56.30),
  ('600028', '中国石化', 4.38),
  ('601899', '紫金矿业', 9.82),
  ('002594', '比亚迪', 258.60),
  ('601012', '隆基绿能', 38.45),
  ('600900', '长江电力', 22.76)
ON CONFLICT (id) DO NOTHING; -- 若已存在则不重复插入

-- 3. 插入默认用户数据（确保 user 表有数据）
INSERT INTO public."user" (id, balance) VALUES (1, 100000.00)
ON CONFLICT (id) DO NOTHING;


-- 创建用于执行动态SQL的函数
CREATE OR REPLACE FUNCTION public.exec_sql(sql text)
RETURNS void AS $$
BEGIN
  -- 执行传入的SQL语句
  EXECUTE sql;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 授予执行权限（允许匿名用户和已认证用户调用）
GRANT EXECUTE ON FUNCTION public.exec_sql(text) TO anon, authenticated;
